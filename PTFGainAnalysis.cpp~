// This class is used to calculate the gain of 20-in PMT at each scanned point
#include "PTFGainAnalysis.hpp"
#include "ScanPoint.hpp"
#include "WaveformFitResult.hpp"
#include "PTFAnalysis.hpp"
#include <iostream>
#include<fstream>
#include<cmath>
#include<string>
using namespace std;

PTFGainAnalysis::PTFGainAnalysis( TFile *outfile, PTFAnalysis *ptfanalysis){
   vector< double > xbins = ptfanalysis->get_bins( 'x' );
  vector< double > ybins = ptfanalysis->get_bins( 'y' );
 Gain_2Dhist = new TH2D("Gain", "Charge distribution", xbins.size()-1, &xbins[0], ybins.size()-1, &ybins[0]);
 //  Gain_hist= new  TH1D("Gain", "Charge distribution",358,0,358);
  //  Gain_2Dhist=new TH2D("Gain_2D", "Two dimentional histogram for gain",36,0,6,36,0,6); 

  vector<ScanPoint>scanpoints=ptfanalysis->get_scanpoints();
  	ofstream secondfile;
	secondfile.open("Manypoints.csv",ios::app);
	//	double arr[37][4700]={0,0};
	double arr[37]={0};
  
  for(unsigned int iscan=0; iscan<scanpoints.size(); iscan++){
    ScanPoint scanpoint = scanpoints[iscan ];
    long long entry = scanpoint.get_entry();
    //   double integ_result;
    //Loop through fit results
    // if(iscan==20){

	vector<double>integ;
    for(unsigned long long iwavfm=0; iwavfm<scanpoint.nentries(); iwavfm++){
      entry += iwavfm;
      
      const WaveformFitResult fit_result = ptfanalysis->get_fitresult(iscan, iwavfm);
       if (fit_result.haswf){
	 //double arr[37][fit_result.haswf]={0,0};
  
       
double	integ_result=0;
	int n=100000;
	double dx;
	double xmax=5000;
	double xmin=0;
	dx=(xmax-xmin)/n;
    
	for (int i=0; i<n;i++){
	  double xi=xmin+i*dx;
	
	  double functionValue=(fit_result.amp * exp( -0.5 * pow( (xi-fit_result.mean)/(fit_result.sigma* fit_result.sigma), 2.0 )));
	
	  double integral=functionValue*dx;
	  integ_result+=integral;

	}
	//	cout<<"The result is"<<integ_result<<endl;

	//	ofstream myfile;
	//	myfile.open ("Gain.txt", ios::app);
  
  
  
	//	myfile <<integ_result<<endl;
	

	    
	
	// arr[iscan][iwavfm]=integ_result;		
	//	secondfile<<arr[iscan][iwavfm];
	

	
		integ.push_back(integ_result);
	//if(iwavfm>0){
	  arr[iscan]+=integ_result;
       
	  //	}
	
	  //  }
	// }

       /*	vector<double>integ;
	integ.push_back(integ_result);
int	k=integ.size();
 double	g[integ.size()]={0};
	
	for(int k=0; k<integ.size();k++)
	g[k]=integ.at(k);*/
       
    
    }
       
  }
     
    //	double x,y;arr[iscan]/=integ.size();
    cout<<"Mean is"<<arr[iscan]/integ.size()<<endl;//  secondfile<<endl
	for(unsigned long long iwavfm=0; iwavfm<scanpoint.nentries(); iwavfm++){
      entry += iwavfm;
      
      const WaveformFitResult fit_result = ptfanalysis->get_fitresult(iscan, iwavfm);
      Gain_2Dhist->Fill(fit_result.x,fit_result.y,arr[iscan]/integ.size());
    		
}
}
 
     

  

   
   
  
}
